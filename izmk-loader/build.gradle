import ovo.xsvf.task.MergeTask
import ovo.xsvf.task.MergeTaskA
import ovo.xsvf.task.MergeTaskB

plugins {
    id 'java'
    id 'com.gradleup.shadow' version '9.0.0-beta8'
}

group = 'ovo.xsvf'
version = '1.0-SNAPSHOT'

dependencies {
    // gson
    implementation 'com.google.code.gson:gson:2.10.1'

    // asm
    implementation 'org.ow2.asm:asm:9.2'
    implementation 'org.ow2.asm:asm-commons:9.2'
    implementation 'org.ow2.asm:asm-tree:9.2'
    implementation 'org.ow2.asm:asm-analysis:9.2'

    // jna
    implementation 'net.java.dev.jna:jna:5.12.1'
    implementation 'net.java.dev.jna:jna-platform:5.12.1'

    compileOnly files("$rootDir/allatori/annotations.jar")

    implementation project(':izmk-common')
}

jar {
    manifest {
        attributes 'Main-Class': 'ovo.xsvf.ServiceMain'
        attributes 'Premain-Class': 'ovo.xsvf.Bootstrap'
        attributes 'Agent-Class': 'ovo.xsvf.Bootstrap'
        attributes 'Can-Redefine-Classes': true, 'Can-Retransform-Classes': true, 'Can-Set-Native-Method-Prefix': true
    }
}

tasks.register('merge', MergeTask) {
    dependsOn project(':izmk-core').tasks.accessor
    dependsOn shadowJar

    group 'merge'

    loader = tasks.shadowJar.archiveFile.get().asFile
    core = project(':izmk-core').tasks.accessor.outputs.files.singleFile
    output = file("${layout.buildDirectory.asFile.get().absolutePath}/libs/merged-loader.jar")

    inputs.files(loader, core)
    outputs.file(output)
}

tasks.register("copyDeps", Copy) {
    from configurations.runtimeClasspath
    into "$buildDir/deps"
}

tasks.register('mergeRemapA', MergeTaskA) {
    dependsOn tasks.shadowJar
    dependsOn project(':izmk-core').tasks.remap

    group 'merge'

    loader = tasks.shadowJar.archiveFile.get().asFile
    output = file("${layout.buildDirectory.asFile.get().absolutePath}/libs/merged-loader-A.jar")

    inputs.files(loader)
    outputs.file(output)
}

tasks.register("obfuscate") {
    dependsOn tasks.mergeRemapA
    dependsOn project(':izmk-core').tasks.copyDeps
    dependsOn tasks.copyDeps

    group 'merge'

    inputs.files(tasks.mergeRemapA.outputs.files.singleFile,
            project(':izmk-core').tasks.copyDeps.outputs.files.asFileTree,
            tasks.copyDeps.outputs.files.asFileTree,
            fileTree(new File(tasks.compileJava.javaCompiler.get().executablePath
                    .asFile.parentFile.parentFile.absolutePath, "jmods")))
    outputs.file(tasks.mergeRemapA.outputs.files.singleFile.absolutePath)

    doLast {
        copy {
            from "$rootDir/allatori/allatori.xml"
            into "${layout.buildDirectory.get()}/obf/"
            expand(inputJar: tasks.mergeRemapA.outputs.files.singleFile.absolutePath,
                    outputJar: tasks.mergeRemapA.outputs.files.singleFile.absolutePath,
                    classpathJars: tasks.compileJava.classpath.asPath,
                    logFile: 'allatori-log.xml')
            rename('allatori.xml', 'allatori-expanded.xml')
        }

        javaexec {
            mainClass = 'com.allatori.Class299'
            classpath = files("$rootDir/allatori/allatori.jar")
            args = ["${layout.buildDirectory.get()}/obf/allatori-expanded.xml"]
        }

        def dependencies = project(':izmk-core').tasks.copyDeps.outputs.files.asFileTree
        dependencies += tasks.copyDeps.outputs.files.asFileTree
        dependencies += fileTree(new File(tasks.compileJava.javaCompiler.get().executablePath
                .asFile.parentFile.parentFile.absolutePath, "jmods"))

        copy {
            from "$rootDir/qProtect/config.yml"
            into "${layout.buildDirectory.file("obf").get()}"
            expand(
                    inputJar: tasks.mergeRemapA.outputs.files.singleFile.absolutePath,
                    outputJar: tasks.mergeRemapA.outputs.files.singleFile.absolutePath,
                    dependencies: dependencies.collect { "- $it" }.join('\n  ')
            )
        }

        javaexec {
            mainClass = 'dev.mdma.qprotect.Main'
            classpath = files("$rootDir/qProtect/qprotect.jar")
            args = ['--config', layout.buildDirectory.file("obf\\config.yml").get().asFile.absolutePath]
        }
    }
}

tasks.register('mergeRemapB', MergeTaskB) {
    dependsOn tasks.obfuscate
    dependsOn project(':izmk-core').tasks.remap

    group 'merge'

    loader = tasks.obfuscate.outputs.files.singleFile
    core = project(':izmk-core').tasks.remap.outputs.files.singleFile
    output = file("${layout.buildDirectory.asFile.get().absolutePath}/libs/merged-loader-remap.jar")

    inputs.files(loader, core)
    outputs.file(output)
}