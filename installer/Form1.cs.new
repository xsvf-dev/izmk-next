using System;
using System.IO;
using System.Windows.Forms;
using Microsoft.Win32;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Drawing;

namespace installer
{
    public partial class Form1 : Form
    {
        private const string INSTALLED_KEY = "izmk-qwq-awa";
        private const string TARGET_DIR = @"C:\ProgramData\izmk";
        private const string JAR_FILE = "izmk.jar";
        private const string DLL_FILE = "izmk-lib.dll";
        private const string SERVICE_NAME = "izmk-loader";
        private const string SERVICE_DISPLAY_NAME = "IZMK 启动器";

        private string javaHome;
        private string minecraftPath;
        private TextBox logBox; // 日志显示控件

        public Form1()
        {
            InitializeComponent();
            CreateLogTextBox();
            InitializeInstallation();
        }

        private void CreateLogTextBox()
        {
            // 调整窗体大小
            this.ClientSize = new Size(520, 400);
            
            // 调整控件位置
            this.button1.Location = new Point(this.button1.Location.X, 40);
            this.label1.Location = new Point(this.label1.Location.X, 10);
            
            // 创建日志框
            logBox = new TextBox();
            logBox.Multiline = true;
            logBox.ReadOnly = true;
            logBox.ScrollBars = ScrollBars.Vertical;
            logBox.Size = new Size(480, 300);
            logBox.Location = new Point(20, 80);
            logBox.BackColor = Color.WhiteSmoke;
            
            // 添加到窗体
            this.Controls.Add(logBox);
            
            // 添加初始日志
            LogMessage("安装程序已启动");
        }

        private void LogMessage(string message)
        {
            if (logBox.InvokeRequired)
            {
                logBox.Invoke(new Action(() => LogMessage(message)));
                return;
            }

            logBox.AppendText($"[{DateTime.Now:HH:mm:ss}] {message}{Environment.NewLine}");
            logBox.SelectionStart = logBox.Text.Length;
            logBox.ScrollToCaret();
            Application.DoEvents(); // 确保UI更新
        }

        private void InitializeInstallation()
        {
            try
            {
                LogMessage("正在检查网易我的世界安装路径...");
                
                // 检查网易我的世界安装路径
                string path4399 = null;
                string pathNE = null;
                
                // 尝试从多个可能的注册表位置读取
                path4399 = GetRegistryValue(@"Software\Netease\PC4399_MCLauncher", "DownloadPath");
                if (path4399 == null)
                {
                    path4399 = GetRegistryValue(@"SOFTWARE\Netease\PC4399_MCLauncher", "DownloadPath");
                }
                
                pathNE = GetRegistryValue(@"Software\Netease\MCLauncher", "DownloadPath");
                if (pathNE == null)
                {
                    pathNE = GetRegistryValue(@"SOFTWARE\Netease\MCLauncher", "DownloadPath");
                }

                // 检查HKEY_LOCAL_MACHINE
                if (path4399 == null)
                {
                    path4399 = GetRegistryValueFromLocalMachine(@"SOFTWARE\Netease\PC4399_MCLauncher", "DownloadPath");
                }
                
                if (pathNE == null)
                {
                    pathNE = GetRegistryValueFromLocalMachine(@"SOFTWARE\Netease\MCLauncher", "DownloadPath");
                }

                // 手动设置默认路径检查（常见的安装位置）
                if (path4399 == null && Directory.Exists(@"C:\Program Files (x86)\PC4399\MCLauncher"))
                {
                    LogMessage("在默认路径找到PC4399目录");
                    path4399 = @"C:\Program Files (x86)\PC4399\MCLauncher";
                }
                
                if (pathNE == null && Directory.Exists(@"C:\Program Files (x86)\Netease\MCLauncher"))
                {
                    LogMessage("在默认路径找到网易我的世界目录");
                    pathNE = @"C:\Program Files (x86)\Netease\MCLauncher";
                }

                // 创建诊断日志
                StringBuilder log = new StringBuilder();
                log.AppendLine("注册表路径检查：");
                log.AppendLine($"HKCU\\Software\\Netease\\PC4399_MCLauncher: {GetRegistryValue(@"Software\Netease\PC4399_MCLauncher", "DownloadPath")}");
                log.AppendLine($"HKCU\\Software\\Netease\\MCLauncher: {GetRegistryValue(@"Software\Netease\MCLauncher", "DownloadPath")}");
                log.AppendLine($"HKLM\\SOFTWARE\\Netease\\PC4399_MCLauncher: {GetRegistryValueFromLocalMachine(@"SOFTWARE\Netease\PC4399_MCLauncher", "DownloadPath")}");
                log.AppendLine($"HKLM\\SOFTWARE\\Netease\\MCLauncher: {GetRegistryValueFromLocalMachine(@"SOFTWARE\Netease\MCLauncher", "DownloadPath")}");
                
                LogMessage(log.ToString());
                
                if (path4399 == null && pathNE == null)
                {
                    LogMessage("错误: 无法找到网易我的世界安装目录");
                    MessageBox.Show($"无法找到网易我的世界安装目录\n\n诊断信息：\n{log}", "安装失败", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    Application.Exit();
                    return;
                }

                if (pathNE != null && path4399 != null)
                {
                    LogMessage("检测到两个版本: 网易我的世界 和 PC4399");
                    var result = MessageBox.Show(
                        "检测到网易我的世界存在两个版本，请选择一个安装目录：\n" +
                        "【是】：使用网易我的世界版本\n" +
                        "【否】：使用PC4399版本",
                        "提示",
                        MessageBoxButtons.YesNo,
                        MessageBoxIcon.Information);

                    minecraftPath = result == DialogResult.Yes ? pathNE : path4399;
                    LogMessage($"已选择: {(result == DialogResult.Yes ? "网易我的世界" : "PC4399")}");
                }
                else
                {
                    minecraftPath = pathNE ?? path4399;
                    LogMessage($"找到安装目录: {minecraftPath}");
                }

                string extPath = Path.Combine(minecraftPath, "ext");
                LogMessage($"检查Java目录: {extPath}");
                
                if (!Directory.Exists(extPath))
                {
                    // 尝试寻找备选的Java目录
                    string altJavaPath = Path.Combine(minecraftPath, "java");
                    LogMessage($"尝试备选Java目录: {altJavaPath}");
                    
                    if (Directory.Exists(altJavaPath))
                    {
                        extPath = altJavaPath;
                        LogMessage($"找到备选Java目录: {extPath}");
                    }
                    else
                    {
                        LogMessage("错误: 无法找到Java目录");
                        MessageBox.Show($"网易我的世界 Java 目录不存在\n\n当前路径: {extPath}\n\n诊断信息：\n{log}", "安装失败", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        Application.Exit();
                        return;
                    }
                }

                // 查找Java 21
                LogMessage("正在搜索Java 21...");
                var javaExe = FindJavaExe(extPath);
                if (javaExe == null)
                {
                    // 尝试找任何版本的Java，不限制版本号
                    LogMessage("未找到Java 21，尝试搜索任何版本的Java...");
                    javaExe = FindAnyJavaExe(extPath);
                    if (javaExe == null)
                    {
                        LogMessage("错误: 无法找到任何Java版本");
                        MessageBox.Show($"无法找到网易我的世界 Java 目录\n\n当前路径: {extPath}\n\n诊断信息：\n{log}", "安装失败", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        Application.Exit();
                        return;
                    }
                }

                javaHome = javaExe;
                LogMessage($"找到Java: {javaHome}");
                MessageBox.Show($"找到 Java 目录：{javaHome}", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);

                // 检查是否已安装
                LogMessage("检查是否已安装...");
                if (IsInstalled())
                {
                    LogMessage("检测到已安装过的IZMK");
                    var result = MessageBox.Show("已经安装过了，是否重新安装？", "提示",
                        MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (result == DialogResult.No)
                    {
                        LogMessage("用户取消了重新安装");
                        Application.Exit();
                        return;
                    }
                    LogMessage("正在卸载旧版本...");
                    Uninstall();
                }
            }
            catch (Exception ex)
            {
                LogMessage($"初始化失败: {ex.Message}");
                MessageBox.Show($"初始化失败：{ex.Message}\n\n错误堆栈：{ex.StackTrace}", "错误", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Application.Exit();
            }
        }

        private string FindJavaExe(string extPath)
        {
            try
            {
                LogMessage($"在 {extPath} 中搜索Java 21...");
                var javaExes = Directory.GetFiles(extPath, "java.exe", SearchOption.AllDirectories);
                LogMessage($"找到 {javaExes.Length} 个java.exe文件");
                
                return javaExes.FirstOrDefault(exe =>
                {
                    try
                    {
                        var version = FileVersionInfo.GetVersionInfo(exe);
                        LogMessage($"检查版本: {exe} - {version.FileMajorPart}.{version.FileMinorPart}.{version.FileBuildPart}");
                        return version.FileMajorPart >= 21;
                    }
                    catch (Exception ex)
                    {
                        LogMessage($"获取版本信息失败: {ex.Message}");
                        return false;
                    }
                });
            }
            catch (Exception ex)
            {
                LogMessage($"查找Java异常: {ex.Message}");
                return null;
            }
        }

        private string FindAnyJavaExe(string extPath)
        {
            try
            {
                LogMessage($"在 {extPath} 中搜索任何版本的Java...");
                var javaExes = Directory.GetFiles(extPath, "java.exe", SearchOption.AllDirectories);
                if (javaExes.Length > 0)
                {
                    LogMessage($"找到Java: {javaExes[0]}");
                }
                return javaExes.FirstOrDefault();
            }
            catch (Exception ex)
            {
                LogMessage($"查找Java异常: {ex.Message}");
                return null;
            }
        }

        private bool IsInstalled()
        {
            try
            {
                using (var key = Registry.CurrentUser.OpenSubKey(@"Software\izmk"))
                {
                    return key?.GetValue(INSTALLED_KEY) != null;
                }
            }
            catch (Exception ex)
            {
                LogMessage($"检查安装状态异常: {ex.Message}");
                return false;
            }
        }

        private void Uninstall()
        {
            try
            {
                // 删除服务
                LogMessage("正在删除服务...");
                var processInfo = new ProcessStartInfo
                {
                    FileName = "sc.exe",
                    Arguments = $"delete {SERVICE_NAME}",
                    UseShellExecute = true,
                    Verb = "runas", // 请求管理员权限
                    CreateNoWindow = false
                };
                
                using (var process = Process.Start(processInfo))
                {
                    if (process != null) process.WaitForExit();
                }
                LogMessage("服务删除完成");

                // 删除文件
                LogMessage($"正在删除目录: {TARGET_DIR}");
                var targetDir = Path.Combine(TARGET_DIR);
                if (Directory.Exists(targetDir))
                {
                    Directory.Delete(targetDir, true);
                    LogMessage("目录删除完成");
                }

                // 删除注册表项
                LogMessage("正在删除注册表项...");
                Registry.CurrentUser.DeleteSubKey(@"Software\izmk", false);
                LogMessage("卸载完成");
            }
            catch (Exception ex)
            {
                LogMessage($"卸载失败: {ex.Message}");
                MessageBox.Show($"卸载失败：{ex.Message}\n\n错误堆栈：{ex.StackTrace}", "错误", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void Install()
        {
            try
            {
                LogMessage("开始安装...");
                // 创建目标目录
                LogMessage($"创建目标目录: {TARGET_DIR}");
                Directory.CreateDirectory(TARGET_DIR);

                // 复制文件
                string targetJar = Path.Combine(TARGET_DIR, JAR_FILE);
                LogMessage($"提取JAR文件到: {targetJar}");
                ExtractJar(targetJar);

                // 解压DLL
                string targetDll = Path.Combine(TARGET_DIR, DLL_FILE);
                LogMessage($"提取DLL文件到: {targetDll}");
                ExtractDll(targetDll);

                // 创建服务
                string cmd = $"\"{javaHome}\" -jar \"{targetJar}\"";
                LogMessage($"创建服务，命令: {cmd}");
                
                // 使用Process.Start并请求管理员权限
                var processInfo = new ProcessStartInfo
                {
                    FileName = "sc.exe",
                    Arguments = $"create {SERVICE_NAME} binPath= \"{cmd}\" DisplayName= \"{SERVICE_DISPLAY_NAME}\" start= auto",
                    UseShellExecute = true,
                    Verb = "runas", // 请求管理员权限
                    CreateNoWindow = false
                };
                
                LogMessage("执行sc.exe create命令...");
                using (var process = Process.Start(processInfo))
                {
                    if (process != null)
                    {
                        process.WaitForExit();
                        LogMessage($"sc.exe执行完毕");
                        
                        // 检查服务是否创建成功
                        LogMessage("验证服务是否创建成功...");
                        bool serviceCreated = false;
                        var checkProcess = new ProcessStartInfo
                        {
                            FileName = "sc.exe",
                            Arguments = $"query {SERVICE_NAME}",
                            UseShellExecute = false,
                            RedirectStandardOutput = true,
                            CreateNoWindow = true
                        };
                        
                        using (var checkResult = Process.Start(checkProcess))
                        {
                            if (checkResult != null)
                            {
                                string output = checkResult.StandardOutput.ReadToEnd();
                                LogMessage($"服务查询结果: {output}");
                                serviceCreated = !output.Contains("1060") && !output.Contains("失败");
                            }
                        }
                        
                        if (!serviceCreated)
                        {
                            LogMessage("服务创建失败");
                            throw new Exception("服务创建失败，请确保您以管理员身份运行此程序");
                        }
                        else
                        {
                            LogMessage("服务创建成功");
                        }
                    }
                }

                // 写入注册表
                LogMessage("写入注册表...");
                using (var key = Registry.CurrentUser.CreateSubKey(@"Software\izmk"))
                {
                    key?.SetValue(INSTALLED_KEY, true);
                }
                LogMessage("安装完成！");

                MessageBox.Show("IZMK 安装成功！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                Application.Exit();
            }
            catch (Exception ex)
            {
                LogMessage($"安装失败: {ex.Message}");
                MessageBox.Show($"安装失败：{ex.Message}\n\n错误堆栈：{ex.StackTrace}", "错误", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ExtractJar(string targetPath)
        {
            try
            {
                LogMessage("从资源中提取JAR文件...");
                using (var stream = GetType().Assembly.GetManifestResourceStream("installer.izmk.jar"))
                {
                    if (stream == null)
                    {
                        LogMessage("错误: JAR资源未找到");
                        throw new Exception("IZMK JAR 文件未找到！");
                    }

                    using (var fileStream = File.Create(targetPath))
                    {
                        stream.CopyTo(fileStream);
                    }
                }
                LogMessage("JAR文件提取完成");
            }
            catch (Exception ex)
            {
                LogMessage($"提取JAR异常: {ex.Message}");
                throw new Exception($"无法提取 JAR 文件：{ex.Message}");
            }
        }

        private void ExtractDll(string targetPath)
        {
            try
            {
                LogMessage("从资源中提取DLL文件...");
                using (var stream = GetType().Assembly.GetManifestResourceStream("installer.lib.dll"))
                {
                    if (stream == null)
                    {
                        LogMessage("错误: DLL资源未找到");
                        throw new Exception("IZMK DLL 文件未找到！");
                    }

                    using (var fileStream = File.Create(targetPath))
                    {
                        stream.CopyTo(fileStream);
                    }
                }
                LogMessage("DLL文件提取完成");
            }
            catch (Exception ex)
            {
                LogMessage($"提取DLL异常: {ex.Message}");
                throw new Exception($"无法提取 DLL 文件：{ex.Message}");
            }
        }

        private string GetRegistryValue(string path, string key)
        {
            try
            {
                using (var regKey = Registry.CurrentUser.OpenSubKey(path))
                {
                    return regKey?.GetValue(key) as string;
                }
            }
            catch
            {
                return null;
            }
        }

        private string GetRegistryValueFromLocalMachine(string path, string key)
        {
            try
            {
                using (var regKey = Registry.LocalMachine.OpenSubKey(path))
                {
                    return regKey?.GetValue(key) as string;
                }
            }
            catch
            {
                return null;
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            LogMessage("开始安装...");
            Install();
        }
    }
} 