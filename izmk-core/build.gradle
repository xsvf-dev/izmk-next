import ovo.xsvf.task.AccessorTask
import ovo.xsvf.task.RemapTask

plugins {
    id 'java'
    id 'idea'
    id 'com.gradleup.shadow' version '9.0.0-beta8'
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

group = 'ovo.xsvf'
version = '1.0-SNAPSHOT'

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    reobf = true
    copyIdeResources = true
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

configurations {
    shade
    implementation.extendsFrom shade
}

jar {
    archiveClassifier = 'slim'
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    shade project(':izmk-common')
    shade "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    shade "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1"
    shade "com.twelvemonkeys.imageio:imageio-core:3.7.0"
    shade 'com.twelvemonkeys.imageio:imageio-metadata:3.7.1'
    shade "com.twelvemonkeys.imageio:imageio-webp:3.7.1"
    shade "dev.luna5ama:kmogus-core:1.1-SNAPSHOT"
    shade "dev.luna5ama:kmogus-struct-api:1.1-SNAPSHOT"

    shade 'com.sun.msv.datatype.xsd:xsdlib:2013.2'
    shade "gg.essential:elementa:695"
    shade "gg.essential:elementa-unstable-layoutdsl:695"
    shade "gg.essential:universalcraft-1.20.1-forge:375"

    testImplementation "it.unimi.dsi:fastutil:8.5.6"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.2"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.8.2"
    testImplementation "org.junit.platform:junit-platform-commons:1.8.2"
    testImplementation "org.mockito:mockito-core:4.3.1"
    testImplementation "org.mockito:mockito-junit-jupiter:4.3.1"
    testImplementation project(':izmk-common')
    testImplementation project(':izmk-loader')
}

tasks.register("copyDeps", Copy) {
    dependsOn shadowJar

    from configurations.runtimeClasspath
    into "$buildDir/deps"
}

tasks.register('accessor', AccessorTask) {
    dependsOn copyDeps

    targetFile = tasks.shadowJar.archiveFile.get().asFile
    outputFile = tasks.shadowJar.archiveFile.get().asFile

    outputs.file(outputFile)
    def collect = fileTree("$buildDir/deps").collect { it.toPath() }
    collect.forEach { inputs.file(it) }
    libs.addAll(collect)
}

tasks.register('remap', RemapTask) {
    dependsOn accessor

    targetFile = tasks.shadowJar.archiveFile.get().asFile
    outputFile = tasks.shadowJar.archiveFile.get().asFile
    mapFile = file("$projectDir/mapping.srg") as File

    inputs.file(mapFile)
    inputs.file(targetFile)
    outputs.file(outputFile)
    def collect = fileTree("$buildDir/deps")
    collect.forEach { inputs.file(it) }
    libs.addAll(collect)
}

shadowJar {
    configurations = [project.configurations.shade]
    archiveClassifier = ''

    relocate 'kotlin', 'ovo.xsvf.lib.kotlin'
    relocate 'kotlinx', 'ovo.xsvf.lib.kotlinx'
    relocate 'com.twelvemonkeys.imageio', 'ovo.xsvf.lib.com.twelvemonkeys.imageio'
    relocate 'dev.luna5ama', 'ovo.xsvf.lib.dev.luna5ama'
    relocate 'gg.essential', 'ovo.xsvf.lib.gg.essential'
    relocate 'com.sun.msv.datatype.xsd', 'ovo.xsvf.lib.com.sun.msv.datatype.xsd'
    relocate 'jp.gr', 'ovo.xsvf.lib.jp.gr'
    relocate 'malte0811.ferritecore', 'ovo.xsvf.lib.malte0811.ferritecore'
    relocate 'org.intellij', 'ovo.xsvf.lib.org.intellij'
    relocate 'org.jetbrains', 'ovo.xsvf.lib.org.jetbrains'
    relocate 'org.iso_relax', 'ovo.xsvf.lib.org.iso_relax'
    relocate 'org.relaxng', 'ovo.xsvf.lib.org.relaxng'
}
